#+STARTUP: indent
#+TODO: REMINDER TODO NOTE DONE

* Talks
** I see what you mean
- Ideas around Dedalus language semantics were interesting
- Bloom language with better syntax, same semantics
- Expressing eventually consistency and programming in time domain
- Using the database as the common source for describing the values as
  truths over time
- Concept of Ultimate value that can be eventually be set.
** Unconventional Programming with Chemical Computing
- Cross fertilization from two different fields - Computer Programming
  and Nature/Biology
- Using chemical reactions as analogies to programming abstractions
-
*** Prime Reaction
- Using reaction rules and vectors as inputs to generate the primes

*** Gamma Chemical Reaction
- Execution stops when it reaches steady state.. (Hm?)

*** Dining Philosophers Problem
- Reaction of fork molecules & Thinking Philosopher = Eating
  Philosopher
- Reaction of think molecule & Eating Philosopher = Thinking
  Philosopher

*** Terms

- Hatching -> higher order (fn a,b) -> fn, result
  Returns fn so that it can go and keep reacting
*** Books
- Unconventional Programming Paradigms
*** Thoughts
- Basically the time domain and asynchronous nature is modeled by
  chemicals reacting.
- Feels very much like Reactive Programming
- Could be useful for building self-organizing/Self-healing system

** Faster Objects and Arrays
- Closing the gap between C & Java Speedup(?)
- http://www.objectlayout.org
- Will attempt to put into next version of Java. Maybe not in 9 but
  later
- Focus: Speed for POJOs on Heap
- Not trying to improve footprint, purely about speed
- Not off-heap solutions
- Not looking for Immutability
- Targets Java 7
- Modeled after java.util.concurrent (came from outside of Sun - Used
  to be EDU.oswego.cs.dl.util.concurrent)
- Streaming comes directly from layout but Dead Reckoning requires
  compiler support
*** StructuredArray<T>
- Collection is immutable. Cannot replace elements
- Instantiate via factory method. Required to make of same class.
- All elements constructed at instantiation time
**** Liveness
- "Inner pointer keeps container alive" semantics is what everyone is
  doing. That's the only thing they have guarantee of liveness
- Real objects have real liveness
- Collection members don't keep it implicitly alive, other way around
  instead
**** TODO Features
- Can be locked, shared, just POJOs
- Indexes are longs
- Nested arrays are supported, multi-dimensional and composable
- Subclassable
- NOT constructable. Must be created with factory methods
- Contradiction -> Subclassable but not constructable? Have to expose
  the constructor otherwise to be subclassable
*** Comparisons between approaches
- Value Types are good for on threads. Limitations when you put on
  heap.
- Packed Objects allows precise control. Off-heap & sharing
  data. On-heap implementation is also available
- ObjectLayout - On heap and usable for POJOs
*** Origin
- Need for structs in Java vs "we already have Objects"
- [Hm?] What we need is competitively speedy access for java
  collection semantics that are faster in C
- Too many options in certain datatypes that limit speed
*** C's Benefits
**** Dead Reckoning
- Being able to quickly access memory without referencing
**** Streaming
- Predictable striding access in memory
*** Speed Enabling Limitations
- Object[] vs struct foo[]
- Java: _mutable_ array of _same-base-type_ objects
- C: _immutable_ array of _exact-base-type_ structus
- Mutability & _non-uniform member-size_ force de-reference & break
  streaming

** When "Worst" is Best (in Distributed Systems)
- Designing for absolute worst case penalizes the average case
- Handling worst case network behavior, we can improve the average
  case
- Packets may be delayed for arbitrarily long time - especially in
  cloud deployments, also can always be dropped. Can model both
  behaviors using "Asynchronous Network"
- Many guarantees do not require coordination
- New Designs: avoid coordination unless absolutely necessary
- Systems that behave well during network faults can behave better in
  non-faulty environments too
- Reasoning about worst-case scenarios can be a powerful design tool
*** Availability
- coordination free systems -- don't have to talk between servers
  whether or not the network is available
- Enable infinite scale-out
- Improves throughput -- each can run at the same time and utilize the
  inherent parallelism
*** CAP theorem
- Tradeoffs between availability and getting absolute right answer
- Paper: Harvest and Yield
- Need to communicate if we want to share state
*** Read Committed
- Never read from uncommitted transactions
- Network is the bottleneck now, vs legacy implementations where disk
  was the bottleneck
- Example: Buffer writes until committed.. incomplete implementation
  not seen until done
*** Replication
- For fault tolerance also helps with capacity
*** Failover helps devops too
- "Fail" the database node to do routine maintenance
*** Tail Latency in Microservices
- Targetting tail latency may not improve the average case by much.
*** Universal Design
- Curb cuts - originally designed for people in wheelchairs but useful
  for everyone.
- W3C Accessibility document

** "All In" With Determinism for Performance and Testing in Distributed Systems
- VoltDB - reads are aimed to be deterministic
- COW snapshot. Hash to check if replicas are consistent or not
- Allows non-deterministic reads but not writes
- Running mixed versions when you're relying on determinism is scary
*** ACID
- Atomic --> All or nothing. No prtial failure
- Consistent --> Schema constraints
**** Isolation Levels
- Volt-DB only supports Seralizability
**** Testing ACID
- State Machine Fuzzing {REMINDER: watch again}
- Self-checking workload
- TransactionID Self Check.
- https://github.com/VoltDB/voltdb/tree/master/tests/test_apps/txnid-selfcheck
***** Isolation
- Run transactions concurrently
***** Durable
***** Consistency
- Skipped
** Building Scalable Stateful Services
*** NOTE I missed about 10 minutes of talk
*** Papers
**** Fast Restarts at Facebook [ Still need to read ]
*** Dynamic Cluster Memebership
- Gossip Protocol vs Consensus Systems
- Availabilty vs Consistency
- Consensus restriction is the last thing you want to have availability
*** Scuba
- In memory database from Facebook
- Composes Results from multiple servers
- Returns the requester how much uncertainty is there
*** Uber Ringpop
- Node.js library that brings application-layer sharding to many of
  their services.
- Swim Gossip Protocol + Consistent Hashing
- Focused on availability
*** Orleans
- From Microsoft Research
- Runtime and Programming Model
- Uses Actor Model
- Gossip Protocol for cluster membership
- Workload => Consistent Hashing & DHTs
- Pooling state into services

*** Issues to be Aware of in Stateful services
**** Unbounded Data Structures
- Stateful services need explicit bounds on structures
- Otherwise end up with long Garbage Collection cycles
- "Clients are not your frinds, they're not going to do what you want
  them to do" -- regarding size/length of sessions
**** Memory Management
**** Reloading State
- First connection
- Recovering from crashes
- New Code
- Percentiles?
- In Halo, the first connection would timeout but the service would be
  polling for data and the future connections would succeed.
** Apache Kafka and the Next 700 Stream Processing Systems
- 3 ways of thinking about Software based on how they do Inputs &
  Outputs
- 2: Request/Response and Batch cover most of them
- Stream Processing is becoming more popular
- Being able to represent inside a company as a stream
- Retail as one of the natural examples
- Reason you haven't seen Stream Processing at scale is lack of
  infrastructure for it
- Lot of work has been done for Request/Response and Batch but not in
  the middle
- Message Systems, Complex Event Processing, ESB, Database Triggers
  are ways to handle this space leaving a vacuum for Stream Processing
- Stream Processing = Logs + App Code
- State is maintained in the app code. Maintaining the state even when
  the program dies is the hard problem
*** Hard Problems
- Partitioning & Scalability
- Unifying Streams and Tables -- putting them together gracefully
- Time
- Re-processing
- Semantics & Fault Tolerance
- Maintaining Change Logs
*** Kafka
- Maintains logs at large scale efficiently
- Log Compaction --> way of maintaining persistent state over time
- App journals change logs to Kafka as a backup
- Notion of time in Kafka -- Offset
- But the log may have gotten compacted by the time the service needs
  to re-process.
- Taking about 1.1 Trillion messages per day at LinkedIn
** From Protesting to Programming: Becoming a Tech Activist
- Story of Ferguson
- She had to change her name from Idalin to Abby
- Was humiliated and embarassed to say her name
- Had to use Abby to get even a phone interview
- From the poorest zipcode in Philly, 75% dropout rate in high school
- Considered dropping out from college, struggled
- Used Ask Jeeves to ask questions about everything
- Graduating 3.75 from college in applied statistics
** Hopelessness and Confidence in Distributed Systems Design #strangeloop
http://trevmex.com/post/129916074918/hopelessness-and-confidence-in-distributed-systems
** Specter : Nested Clojure data structures

- Using mapv because original seq is a vector and map converts to list
- Navigating to datastructure is very hard if it's nested
- (srange) subsequence within sequence
- StructurePath Protocol is the core component of specter
   + transform
   + select
- (if-path) is like (if) but operates on nested structures
- really fast.. almost as good as handwritten code
- Using (compiled-path) can be faster than update-in
- Can do pre-compilation in any scenario now
** CRDTs Illustrated
- Exactly once Delivery is generally impossible when partitions happen
** Transactions: myths, surprises and opportunities
- Need something in the middle between serializability and eventual
  consistency to express causality
- Consistent Snapshot means its consistent with causality
- Can be implemented without global coordination
*** Read Committed
- Avoids dirty reads and writes
- Read skew can happen
- Default isolation level for Oracle, Postgres and SQL Server
- Repeatable Read & Snapshot Isolation were introduced to avoid read skew
- Databases call Repeatable Read when they mean Snapshot Isolation
*** Snapshot Isolation
- Transaction sees database at one point in time
- Multi-Version -> Database keeps several versions of a data item
- Not Serializable
*** Write Skew
- By the time the write is committed, the premise of the decision may not be true
- Serializability violatied
*** 2-Phase Locking
- When you read something, acquire and hold the lock until the end of
  transaction.
- Performance Problems: If you're reading the entire database, you're
  locking entire database
*** Transaction Boundary
- Ensuring transactions don't happen across services
- If you want serializable transactions across services, you need a
  atomic commits across services
- Turns into an atomic broadcast problem. It's equivalent to consensus
- Consensus is pretty expensive to do. 2-PC makes it brittle.

** PTero
- Workflow for doing genome sequencing using distributed systems
- How to build pipelines to do genetic sequencing at scale and allow
  researchers to change the steps in the pipeline.
- Fragile Building block towers.
- Made uniform interfaces and automated pipelines as the sequencing
  costs came
- Deployed on Deis & VMs. Celery for messaging between components,
  RabbitMQ for messaging broker
- Language: Python mostly
*** Legacy Workflow
- Declarative XML based workflow description
- Parallel-by concept
  + Sort of like map reduce but without the reduce. "Run this process
    but for every chromosome, or genome, etc"
- Centralized workflow tracking
- Highly coupled to perl, etc
- Represented workflows as DAG
  + DAGs encode dependencies between processes
  + Cannot do choice at runtime
  + Can do choices at runtime using a FSM
  + If you use someone elses workflow engine, you have to convert your
    FSMs to DAGs
  + Petri-Net -- can do more than FSMs and DAG
*** Petri Net
- Places and Transitions
- Places represent state
- bipartite graph representation
- transitions fire iff all input places have a token
- They use it to do both choice and concurrency
- Using the transition to have side-effects
*** Flow
- Scales up nicely w/ concurrent wokflows and # of tasks in workflow
- was tied to the old XML format from legacy workflow and made it
  cumbersome
*** Design Goals
- ability to scale, use RESTful API
- pluggable job execution services
- Task has at least one method, can have more. No method executes if
  the first one succeeds
   + you can do things like run the shortcut one that depends on the
     index, if that fails, generate the required indexes
*** Development
- Development Methodology: SEMAT, System Design: 12 Factor
- waffle.io looks interesting

* Unsessions
** Java 8 streams and lambdas
- Not same as Anonymous Classes - according to Brian Goetz
  Need to find the mailing list discussion about it.
- '->' separates the left hand side of the equation from the right
*** Streams
- Parallel Streams
  + You need to know how ForkJoinPool works
  + Don't want to use it inside a container
  + Benchmark your use cases
- There's a peek operation for streams

** Emacs
Featured modes/tips from (uncredited) the unsession:

emacs-friends: https://github.com/ustun/emacs-friends
ido -- ido-ubiquitous ? many other ido packages
helm ac-helm
winner-mode
yasnippet
emacs as a script engine, https://gist.github.com/kat-co/9a51ed7f5ac8cc874b26
elnode http://emacswiki.org/emacs/Elnode
ensime - Enhanced Scala mode; see also scala-mode2
org-mode
Emacs Rocks - RESTful client demo http://emacsrocks.com/e15.html


* Watch again
** Building Scalable Stateful Services
** Apache Kafka and the Next 700 Stream Processing Systems
** Specter
* Talks to Catchup on
- Ordered by priority -- more or less
Playlist is at
https://www.youtube.com/playlist?list=PLcGKfGEEONaCIl5eU53uPBnRJ9rbIH32R
** Immutable Data Science with Datomic, Spark and Kafka
** How to Have your Causality and Wall Clocks, Too
** CRDT talks
** Typed Clojure: From Optional to Gradual Typing
** Managing Containers at Scale with CoreOS and Kubernetes
** GC Tuning Confessions Of A Performance Engineer
** Unikernels talk
*** REMINDER - Remind Icy
** Ideology
Gary Bernhardt
*** REMINDER - Tell Prajjwol about it
** Amy Wibowo's talk in Centene
